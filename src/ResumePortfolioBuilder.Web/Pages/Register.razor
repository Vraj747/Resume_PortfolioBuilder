@page "/register"
@using System.ComponentModel.DataAnnotations
@using ResumePortfolioBuilder.Web.Services
@inject IApiService ApiService
@inject NavigationManager NavigationManager

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h3 class="text-center">Register</h3>
            </div>
            <div class="card-body">
                <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group mb-3">
                        <label for="username">Username</label>
                        <InputText id="username" @bind-Value="registerModel.Username" class="form-control" />
                        <ValidationMessage For="@(() => registerModel.Username)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="email">Email</label>
                        <InputText id="email" @bind-Value="registerModel.Email" class="form-control" />
                        <ValidationMessage For="@(() => registerModel.Email)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="password">Password</label>
                        <InputText id="password" @bind-Value="registerModel.Password" type="password" class="form-control" />
                        <ValidationMessage For="@(() => registerModel.Password)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="confirmPassword">Confirm Password</label>
                        <InputText id="confirmPassword" @bind-Value="registerModel.ConfirmPassword" type="password" class="form-control" />
                        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                    </div>

                    <div class="form-group d-grid">
                        <button type="submit" class="btn btn-primary" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span> Loading...</span>
                            }
                            else
                            {
                                <span>Register</span>
                            }
                        </button>
                    </div>
                </EditForm>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3">
                        @errorMessage
                    </div>
                }

                @if (isSuccess)
                {
                    <div class="alert alert-success mt-3">
                        Registration successful! You can now <a href="/login">login</a>.
                    </div>
                }

                <div class="mt-3 text-center">
                    <p>Already have an account? <a href="/login">Login here</a></p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private bool isLoading = false;
    private bool isSuccess = false;
    private string errorMessage = string.Empty;

    private async Task HandleRegistration()
    {
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            errorMessage = "Passwords do not match";
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;
        isSuccess = false;

        try
        {
            var result = await ApiService.RegisterAsync(registerModel.Username, registerModel.Email, registerModel.Password);
            
            if (result)
            {
                isSuccess = true;
                registerModel = new RegisterModel();
            }
            else
            {
                errorMessage = "Registration failed";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private class RegisterModel
    {
        [Required]
        public string Username { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} characters long.", MinimumLength = 6)]
        public string Password { get; set; }

        [Required]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; }
    }
} 